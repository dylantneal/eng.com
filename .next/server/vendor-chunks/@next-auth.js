"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@next-auth";
exports.ids = ["vendor-chunks/@next-auth"];
exports.modules = {

/***/ "(rsc)/./node_modules/@next-auth/supabase-adapter/dist/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/@next-auth/supabase-adapter/dist/index.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.SupabaseAdapter = exports.format = void 0;\nconst supabase_js_1 = __webpack_require__(/*! @supabase/supabase-js */ \"(rsc)/./node_modules/@supabase/supabase-js/dist/module/index.js\");\nfunction isDate(date) {\n    return (new Date(date).toString() !== \"Invalid Date\" && !isNaN(Date.parse(date)));\n}\nfunction format(obj) {\n    for (const [key, value] of Object.entries(obj)) {\n        if (value === null) {\n            delete obj[key];\n        }\n        if (isDate(value)) {\n            obj[key] = new Date(value);\n        }\n    }\n    return obj;\n}\nexports.format = format;\nconst SupabaseAdapter = ({ url, secret, }) => {\n    const supabase = (0, supabase_js_1.createClient)(url, secret, {\n        db: { schema: \"next_auth\" },\n        global: {\n            headers: { \"X-Client-Info\": \"@next-auth/supabase-adapter@0.1.0\" },\n        },\n    });\n    return {\n        async createUser(user) {\n            var _a;\n            const { data, error } = await supabase\n                .from(\"users\")\n                .insert({\n                ...user,\n                emailVerified: (_a = user.emailVerified) === null || _a === void 0 ? void 0 : _a.toISOString(),\n            })\n                .select()\n                .single();\n            if (error)\n                throw error;\n            return format(data);\n        },\n        async getUser(id) {\n            const { data, error } = await supabase\n                .from(\"users\")\n                .select()\n                .eq(\"id\", id)\n                .maybeSingle();\n            if (error)\n                throw error;\n            if (!data)\n                return null;\n            return format(data);\n        },\n        async getUserByEmail(email) {\n            const { data, error } = await supabase\n                .from(\"users\")\n                .select()\n                .eq(\"email\", email)\n                .maybeSingle();\n            if (error)\n                throw error;\n            if (!data)\n                return null;\n            return format(data);\n        },\n        async getUserByAccount({ providerAccountId, provider }) {\n            const { data, error } = await supabase\n                .from(\"accounts\")\n                .select(\"users (*)\")\n                .match({ provider, providerAccountId })\n                .maybeSingle();\n            if (error)\n                throw error;\n            if (!data || !data.users)\n                return null;\n            return format(data.users);\n        },\n        async updateUser(user) {\n            var _a;\n            const { data, error } = await supabase\n                .from(\"users\")\n                .update({\n                ...user,\n                emailVerified: (_a = user.emailVerified) === null || _a === void 0 ? void 0 : _a.toISOString(),\n            })\n                .eq(\"id\", user.id)\n                .select()\n                .single();\n            if (error)\n                throw error;\n            return format(data);\n        },\n        async deleteUser(userId) {\n            const { error } = await supabase.from(\"users\").delete().eq(\"id\", userId);\n            if (error)\n                throw error;\n        },\n        async linkAccount(account) {\n            const { error } = await supabase.from(\"accounts\").insert(account);\n            if (error)\n                throw error;\n        },\n        async unlinkAccount({ providerAccountId, provider }) {\n            const { error } = await supabase\n                .from(\"accounts\")\n                .delete()\n                .match({ provider, providerAccountId });\n            if (error)\n                throw error;\n        },\n        async createSession({ sessionToken, userId, expires }) {\n            const { data, error } = await supabase\n                .from(\"sessions\")\n                .insert({ sessionToken, userId, expires: expires.toISOString() })\n                .select()\n                .single();\n            if (error)\n                throw error;\n            return format(data);\n        },\n        async getSessionAndUser(sessionToken) {\n            const { data, error } = await supabase\n                .from(\"sessions\")\n                .select(\"*, users(*)\")\n                .eq(\"sessionToken\", sessionToken)\n                .maybeSingle();\n            if (error)\n                throw error;\n            if (!data)\n                return null;\n            const { users: user, ...session } = data;\n            return {\n                user: format(user),\n                session: format(session),\n            };\n        },\n        async updateSession(session) {\n            var _a;\n            const { data, error } = await supabase\n                .from(\"sessions\")\n                .update({\n                ...session,\n                expires: (_a = session.expires) === null || _a === void 0 ? void 0 : _a.toISOString(),\n            })\n                .eq(\"sessionToken\", session.sessionToken)\n                .select()\n                .single();\n            if (error)\n                throw error;\n            return format(data);\n        },\n        async deleteSession(sessionToken) {\n            const { error } = await supabase\n                .from(\"sessions\")\n                .delete()\n                .eq(\"sessionToken\", sessionToken);\n            if (error)\n                throw error;\n        },\n        async createVerificationToken(token) {\n            const { data, error } = await supabase\n                .from(\"verification_tokens\")\n                .insert({\n                ...token,\n                expires: token.expires.toISOString(),\n            })\n                .select()\n                .single();\n            if (error)\n                throw error;\n            const { id, ...verificationToken } = data;\n            return format(verificationToken);\n        },\n        async useVerificationToken({ identifier, token }) {\n            const { data, error } = await supabase\n                .from(\"verification_tokens\")\n                .delete()\n                .match({ identifier, token })\n                .select()\n                .maybeSingle();\n            if (error)\n                throw error;\n            if (!data)\n                return null;\n            const { id, ...verificationToken } = data;\n            return format(verificationToken);\n        },\n    };\n};\nexports.SupabaseAdapter = SupabaseAdapter;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@next-auth/supabase-adapter/dist/index.js\n");

/***/ })

};
;