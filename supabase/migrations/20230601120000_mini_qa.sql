/*******************************
* 1. Per-user up-vote throttling
*******************************/
create table if not exists public.comment_votes (
  id          bigint generated by default as identity primary key,
  comment_id  bigint  not null references public.comments(id) on delete cascade,
  user_id     uuid    not null references auth.users(id)    on delete cascade,
  created_at  timestamptz not null default now(),
  constraint unique_comment_vote unique(comment_id, user_id)
);

/************************************************
* 2. Keep comments.upvotes in-sync (INSERT/DELETE)
************************************************/
create or replace function public.fn_update_upvotes()
returns trigger as $$
begin
  if (TG_OP = 'INSERT') then
    update public.comments
       set upvotes = coalesce(upvotes, 0) + 1
     where id = NEW.comment_id;
  else
    update public.comments
       set upvotes = greatest(coalesce(upvotes, 0) - 1, 0)
     where id = OLD.comment_id;
  end if;
  return null;
end;
$$ language plpgsql security definer;

drop trigger if exists trg_update_upvotes on public.comment_votes;
create trigger trg_update_upvotes
  after insert or delete on public.comment_votes
  for each row execute function public.fn_update_upvotes();

/***********************************************
* 3. Award +5 rep. when an answer is accepted
***********************************************/
create or replace function public.fn_award_rep()
returns trigger as $$
declare
  answer_author uuid;
begin
  -- fire only on first acceptance
  if NEW.is_accepted = true and coalesce(OLD.is_accepted, false) = false then
     select user_id into answer_author from public.comments where id = NEW.id;
     update public.profiles
        set reputation = coalesce(reputation, 0) + 5
      where id = answer_author;
  end if;
  return NEW;
end;
$$ language plpgsql security definer;

drop trigger if exists trg_award_rep on public.comments;
create trigger trg_award_rep
  before update of is_accepted on public.comments
  for each row execute function public.fn_award_rep(); 