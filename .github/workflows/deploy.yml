name: Deploy to Google Cloud Run

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GAR_LOCATION: us-central1
  SERVICE: eng-com
  REGION: us-central1

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Generate Prisma client
      run: npx prisma generate
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db

    - name: Run database migrations
      run: npx prisma migrate deploy
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db

    - name: Run tests
      run: npm test
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        NEXTAUTH_SECRET: test-secret
        NEXTAUTH_URL: http://localhost:3000

    - name: Run linting
      run: npm run lint

    - name: Check TypeScript
      run: npm run type-check

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    permissions:
      contents: read
      id-token: write

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Google Auth
      id: auth
      uses: 'google-github-actions/auth@v2'
      with:
        credentials_json: '${{ secrets.GCP_SA_KEY }}'

    - name: Set up Cloud SDK
      uses: 'google-github-actions/setup-gcloud@v2'

    - name: Configure Docker to use gcloud as a credential helper
      run: |
        gcloud auth configure-docker $GAR_LOCATION-docker.pkg.dev

    - name: Build and Push Container
      run: |-
        docker build -t "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/cloud-run-source-deploy/$SERVICE:$GITHUB_SHA" ./
        docker push "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/cloud-run-source-deploy/$SERVICE:$GITHUB_SHA"

    - name: Deploy to Cloud Run
      id: deploy
      uses: google-github-actions/deploy-cloudrun@v2
      with:
        service: ${{ env.SERVICE }}
        region: ${{ env.REGION }}
        image: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/cloud-run-source-deploy/${{ env.SERVICE }}:${{ github.sha }}
        env_vars: |
          NODE_ENV=production
          DATABASE_URL=${{ secrets.DATABASE_URL }}
          NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }}
          NEXTAUTH_URL=${{ secrets.NEXTAUTH_URL }}
          STRIPE_SECRET_KEY=${{ secrets.STRIPE_SECRET_KEY }}
          GOOGLE_CLOUD_PROJECT_ID=${{ secrets.GCP_PROJECT_ID }}
          GOOGLE_CLOUD_STORAGE_BUCKET=${{ secrets.GCS_BUCKET }}
        flags: |
          --port=3000
          --memory=2Gi
          --cpu=2
          --min-instances=1
          --max-instances=100
          --concurrency=80
          --timeout=300
          --allow-unauthenticated
        
    - name: Run Database Migrations
      run: |
        gcloud run jobs create migrate-db \
          --image=$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/cloud-run-source-deploy/$SERVICE:$GITHUB_SHA \
          --region=$REGION \
          --set-env-vars="DATABASE_URL=${{ secrets.DATABASE_URL }}" \
          --command="npx" \
          --args="prisma,migrate,deploy" \
          --max-retries=3 \
          --parallelism=1 \
          --task-count=1 \
          --task-timeout=600 \
          --cpu=1 \
          --memory=1Gi || true
        
        gcloud run jobs execute migrate-db --region=$REGION --wait

    - name: Run Smoke Tests
      run: |
        SERVICE_URL=$(gcloud run services describe $SERVICE --region=$REGION --format='value(status.url)')
        echo "Testing deployment at: $SERVICE_URL"
        
        # Test health endpoint
        curl -f "$SERVICE_URL/api/health" || exit 1
        
        # Test main page
        curl -f "$SERVICE_URL/" || exit 1
        
        echo "âœ… Smoke tests passed!"

    - name: Update Traffic
      run: |
        gcloud run services update-traffic $SERVICE \
          --region=$REGION \
          --to-latest

    - name: Show Output
      run: echo ${{ steps.deploy.outputs.url }} 